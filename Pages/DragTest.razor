@page "/ondrag"
@using System.Numerics
@inject HttpClient Http

@if (_nodes == null)
{
    <div>loading</div>
}
else
{
    <div class="relative w-full h-full overflow-hidden" @ondrop="OnDrop" @ondragover="OnDragOver"
    @ondragover:preventDefault>
        @foreach (var node in _nodes)
        {
            <div class="absolute px-2 py-1 bg-zinc-200 rounded-md ring-1 ring-gray-900/10" style="
            left: @(node.X)px;
            top: @(node.Y)px;
            width: @(node.Width)px;
            height: @(node.Height)px" @ondragstart="@(e=>OnDrag(e, node))" draggable="true">
                @node.Contents
            </div>
        }
    </div>
}

@code {
    private List<Node>? _nodes;
    private Node? _node = null;
    private Vector2 _dragpositionstart;

    protected override void OnInitialized()
    {
        _nodes = Enumerable.Range(1, 10).Select(i => new Node
        {
            X = i * 20,
            Y = i * 30,
            Contents = $"Henlo {i}",
        }).ToList();
    }

    void OnDrag(DragEventArgs e, Node node)
    {
        _dragpositionstart = new Vector2((float)e.ClientX, (float)e.ClientY);
        _node = node;
        e.DataTransfer.DropEffect = "move";
    }

    void OnDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "move";
    }

    void OnDrop(DragEventArgs e)
    {
        if (_node == null)
            return;

        var newpos = new Vector2((float)e.ClientX, (float)e.ClientY);

        var newvalue = newpos - _dragpositionstart;
        _node.X += newvalue.X;
        _node.Y += newvalue.Y;

        _node = null;
    }


    record Node
    {
        public double X { get; set; } = 0;
        public double Y { get; set; } = 0;
        public double Width { get; set; } = 140;
        public double Height { get; set; } = 80;

        public string Contents = "henlo :3";
    }
}
